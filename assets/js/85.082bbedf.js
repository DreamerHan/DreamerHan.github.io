(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{548:function(t,v,a){"use strict";a.r(v);var _=a(54),r=Object(_.a)({},(function(){var t=this,v=t.$createElement,a=t._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"js-中的堆和栈有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-中的堆和栈有什么区别"}},[t._v("#")]),t._v(" js 中的堆和栈有什么区别？")]),t._v(" "),a("p",[t._v("在 JavaScript 中，栈内存（Stack Memory）和堆内存（Heap Memory）之间的主要区别如下：")]),t._v(" "),a("h2",{attrs:{id:"数据存储方式不同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据存储方式不同"}},[t._v("#")]),t._v(" 数据存储方式不同")]),t._v(" "),a("ol",[a("li",[a("p",[a("strong",[t._v("栈内存")])]),t._v(" "),a("p",[t._v("栈内存用于存储基本数据类型（如 Number, String, Boolean, Null, Undefined, Symbol）以及对象的引用。")]),t._v(" "),a("p",[t._v("在函数调用时，每个函数都会在栈内存中创建一个新的执行上下文，这个上下文包含了函数的局部变量、参数等信息。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("堆内存")])]),t._v(" "),a("p",[t._v("堆内存则用于存储对象（Object）。在 JavaScript 中，几乎所有的对象都是通过堆内存进行分配的。")]),t._v(" "),a("p",[t._v("当创建一个对象时，JavaScript 会在堆内存中为对象分配一块空间，并将这块空间的地址赋值给栈内存中的一个变量。")])])]),t._v(" "),a("h2",{attrs:{id:"生命周期不同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生命周期不同"}},[t._v("#")]),t._v(" 生命周期不同")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("栈内存")])])]),t._v(" "),a("p",[t._v("栈内存的生命周期很短，当函数执行完毕后，其对应的执行上下文就会被销毁，栈内存中的变量也会被自动清除。")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("strong",[t._v("堆内存")])])]),t._v(" "),a("p",[t._v("堆内存的生命周期则取决于引用它的变量。")]),t._v(" "),a("p",[t._v("只要栈内存中的变量还保持着对堆内存中对象的引用，那么这块对象占用的堆内存就不会被释放。")]),t._v(" "),a("p",[t._v("当没有任何引用指向堆内存中的对象时，该对象就被认为是垃圾，并被 JavaScript 的垃圾回收机制清理掉。")]),t._v(" "),a("h2",{attrs:{id:"大小限制不同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#大小限制不同"}},[t._v("#")]),t._v(" 大小限制不同")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("栈内存")])])]),t._v(" "),a("p",[t._v("栈内存的大小是有限制的，如果函数调用层次太深或者局部变量过多，都可能导致栈溢出错误。")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("strong",[t._v("堆内存")])])]),t._v(" "),a("p",[t._v("堆内存的大小则相对较大，通常受到整个程序可用内存的限制。")]),t._v(" "),a("h2",{attrs:{id:"访问速度不同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#访问速度不同"}},[t._v("#")]),t._v(" 访问速度不同")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("栈内存")])])]),t._v(" "),a("p",[t._v("由于栈内存中的数据是有序的，因此访问速度非常快。")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("strong",[t._v("堆内存")])])]),t._v(" "),a("p",[t._v("堆内存中的数据是无序的，访问速度相对较慢。")]),t._v(" "),a("p",[t._v("但是，由于堆内存用于存储大量复杂的数据结构（如对象、数组等），这种访问速度的差异在实际应用中通常是可以接受的。")]),t._v(" "),a("p",[t._v("总的来说，栈内存和堆内存各有其特点和用途，它们在 JavaScript 的内存管理中扮演着重要的角色。理解它们的区别有助于我们更好地编写高效、安全的 JavaScript 代码。")])])}),[],!1,null,null,null);v.default=r.exports}}]);