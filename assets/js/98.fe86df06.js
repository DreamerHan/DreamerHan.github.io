(window.webpackJsonp=window.webpackJsonp||[]).push([[98],{567:function(t,s,a){"use strict";a.r(s);var e=a(54),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"关于-webpack-dev-server"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于-webpack-dev-server"}},[t._v("#")]),t._v(" 关于 webpack-dev-server")]),t._v(" "),a("h2",{attrs:{id:"运行原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运行原理"}},[t._v("#")]),t._v(" 运行原理")]),t._v(" "),a("p",[a("code",[t._v("webpack-dev-server")]),t._v(" 库的原理是启动一个服务器，当浏览器访问这个服务时，与浏览器通过 WebSocket 进行长链接。")]),t._v(" "),a("p",[t._v("同时 webpack-dev-server 会开启 webpack 监听本地代码文件的功能。当本地代码文件更新之后，进行重新打包编译。")]),t._v(" "),a("p",[t._v("webpack-dev-server 通过 WebSocket 将更新模块信息推送给浏览器。浏览器根据此次编译信息，去获取最新代码。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("ol",[a("li",[a("p",[a("strong",[t._v("Webpack")]),t._v(" 本身就支持监听文件代码的变化，而 webpack-dev-server 的作用仅仅是默认开启 webpack 的这一项属性。")])]),t._v(" "),a("li",[a("p",[t._v("webpack-cli@4 版本以后，启动 webpack-dev-server 的指令不再是 webpack-dev-server。而是 "),a("code",[t._v("webpack serve")])])])])]),t._v(" "),a("h2",{attrs:{id:"一些配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一些配置"}},[t._v("#")]),t._v(" 一些配置")]),t._v(" "),a("p",[t._v("webpack-dev-server 读取的属性需要配置在 webpack 配置文件的 devServer 属性下。webpack-dev-server 执行时会读取这个属性来做配置。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("devServer"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 启动服务的host，默认是 localhost")]),t._v("\n  host"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'127.0.0.1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 服务启动的端口，默认是 8080")]),t._v("\n  port"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9527")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 是否自动打开浏览器 string | boolean")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 默认 fales，设置为 true 打开默认浏览器")]),t._v("\n  open"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 是否启动 gzip 压缩，默认是 false")]),t._v("\n  compress"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 是否启动热更新(HMR)，默认是 false")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 热更新使用的是webpack中HotModuleReplacementPlugin")]),t._v("\n  hot"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 是否开启 https 请求，默认是 false")]),t._v("\n  https"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 告诉开发服务器是否启用魔法 HTML 路由（与 webpack 输出相对应的路由，例如“/main”对应“main.js”）")]),t._v("\n  maginHtml"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 检测到文件更改时启用重新加载/刷新页面（默认启用）。")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此属性优先级低于hot")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 为了 liveReload 能够生效，devServer.hot 配置项必须禁用或者 devServer.watchFiles 配置项必须启用")]),t._v("\n  liveReload"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 允许通过指定的索引页面（默认为“index.html”）代理请求，这对于利用 HTML5 History API 的单页应用程序很有用。")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 具体来说，当使用webpack-dev-server启动开发服务器时，会监听指定的端口，并将静态文件（如HTML、CSS、JavaScript等）提供给浏览器。当浏览器发起一个请求时，webpack-dev-server会根据配置的静态文件路径进行匹配，如果找到了对应的静态文件，则返回该文件。如果请求的URL没有匹配到任何静态文件，即请求的是前端路由的路径，此时history-api-fallback配置项会生效，它会将这个请求重定向到指定的HTML文件，通常是前端应用程序的入口文件，这样前端应用程序就能够正确加载，并根据URL路径来渲染相应的页面1。")]),t._v("\n  historyApiFallback"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 该选项允许将允许访问开发服务器的服务列入白名单")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// auto | all | ['host.com']")]),t._v("\n  allowedHosts"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'all'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 该配置项允许你配置 globs/directories/files 来监听文件变化")]),t._v("\n  watchFiles"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'src/**/*.php'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'public/**/*'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 配置从目录提供静态文件的选项（默认是 'public' 文件夹）。将其设置为 false 以禁用")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// string | boolean | object | [string, object]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 告诉服务器从哪里提供内容。只有在你希望提供静态文件时才需要这样做。")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// static.publicPath 将会被用来决定应该从哪里提供 bundle，并具有优先级。")]),t._v("\n    directory"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("join")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__dirname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'public'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 告诉服务器在哪个 URL 上提供 static.directory 的内容")]),t._v("\n    publicPath"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代理配置")]),t._v("\n  proxy"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/api'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      target"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代理目标地址")]),t._v("\n      pathRewrite"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'^/api'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 路径重写")]),t._v("\n      changeOrigin"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);